"use strict";

require("source-map-support/register");

const {
  _,
  get
} = require("@genx/july");

const tokenCache = {};

function defaultUserAuth(app, userTag) {
  return async client => {
    if (!userTag) {
      delete client.onSend;
      return client;
    }

    let token, userAuth;

    if (_.isPlainObject(userTag)) {
      token = tokenCache[userTag.userTag];
      userAuth = userTag;
    } else {
      token = tokenCache[userTag];
      userAuth = app.settings.userAuth[userTag];
    }

    if (!token) {
      if (!userAuth.endpoint || !userAuth.username || !userAuth.password) {
        throw new Error(`"endpoint", "username", "password" is required for "userAuth" settings of user "${userTag}".`);
      }

      let body = await client.post(userAuth.endpoint, {
        username: userAuth.username,
        password: userAuth.password
      }, userAuth.query, userAuth.headers ? {
        headers: userAuth.headers
      } : null);

      if (userAuth.tokenKey) {
        token = get(body, userAuth.tokenKey);
      } else {
        token = body.token;
      }

      tokenCache[userTag] = token;
      app.log("info", `Logged in with [${userTag}].`);
    }

    client.onSend = req => {
      req.set("Authorization", `Bearer ${token}`);
    };
  };
}

module.exports = defaultUserAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0VXNlckF1dGguanMiXSwibmFtZXMiOlsiXyIsImdldCIsInJlcXVpcmUiLCJ0b2tlbkNhY2hlIiwiZGVmYXVsdFVzZXJBdXRoIiwiYXBwIiwidXNlclRhZyIsImNsaWVudCIsIm9uU2VuZCIsInRva2VuIiwidXNlckF1dGgiLCJpc1BsYWluT2JqZWN0Iiwic2V0dGluZ3MiLCJlbmRwb2ludCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJFcnJvciIsImJvZHkiLCJwb3N0IiwicXVlcnkiLCJoZWFkZXJzIiwidG9rZW5LZXkiLCJsb2ciLCJyZXEiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBYUMsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBRUEsTUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxPQUE5QixFQUF1QztBQUNuQyxTQUFPLE1BQU9DLE1BQVAsSUFBa0I7QUFDckIsUUFBSSxDQUFDRCxPQUFMLEVBQWM7QUFDVixhQUFPQyxNQUFNLENBQUNDLE1BQWQ7QUFDQSxhQUFPRCxNQUFQO0FBQ0g7O0FBRUQsUUFBSUUsS0FBSixFQUFXQyxRQUFYOztBQUVBLFFBQUlWLENBQUMsQ0FBQ1csYUFBRixDQUFnQkwsT0FBaEIsQ0FBSixFQUE4QjtBQUMxQkcsTUFBQUEsS0FBSyxHQUFHTixVQUFVLENBQUNHLE9BQU8sQ0FBQ0EsT0FBVCxDQUFsQjtBQUNBSSxNQUFBQSxRQUFRLEdBQUdKLE9BQVg7QUFDSCxLQUhELE1BR087QUFDSEcsTUFBQUEsS0FBSyxHQUFHTixVQUFVLENBQUNHLE9BQUQsQ0FBbEI7QUFDQUksTUFBQUEsUUFBUSxHQUFHTCxHQUFHLENBQUNPLFFBQUosQ0FBYUYsUUFBYixDQUFzQkosT0FBdEIsQ0FBWDtBQUNIOztBQUVELFFBQUksQ0FBQ0csS0FBTCxFQUFZO0FBQ1IsVUFBSSxDQUFDQyxRQUFRLENBQUNHLFFBQVYsSUFBc0IsQ0FBQ0gsUUFBUSxDQUFDSSxRQUFoQyxJQUE0QyxDQUFDSixRQUFRLENBQUNLLFFBQTFELEVBQW9FO0FBQ2hFLGNBQU0sSUFBSUMsS0FBSixDQUNELG1GQUFrRlYsT0FBUSxJQUR6RixDQUFOO0FBR0g7O0FBRUQsVUFBSVcsSUFBSSxHQUFHLE1BQU1WLE1BQU0sQ0FBQ1csSUFBUCxDQUNiUixRQUFRLENBQUNHLFFBREksRUFFYjtBQUNJQyxRQUFBQSxRQUFRLEVBQUVKLFFBQVEsQ0FBQ0ksUUFEdkI7QUFFSUMsUUFBQUEsUUFBUSxFQUFFTCxRQUFRLENBQUNLO0FBRnZCLE9BRmEsRUFNYkwsUUFBUSxDQUFDUyxLQU5JLEVBT2JULFFBQVEsQ0FBQ1UsT0FBVCxHQUFtQjtBQUFFQSxRQUFBQSxPQUFPLEVBQUVWLFFBQVEsQ0FBQ1U7QUFBcEIsT0FBbkIsR0FBbUQsSUFQdEMsQ0FBakI7O0FBU0EsVUFBSVYsUUFBUSxDQUFDVyxRQUFiLEVBQXVCO0FBQ25CWixRQUFBQSxLQUFLLEdBQUdSLEdBQUcsQ0FBQ2dCLElBQUQsRUFBT1AsUUFBUSxDQUFDVyxRQUFoQixDQUFYO0FBQ0gsT0FGRCxNQUVPO0FBQ0haLFFBQUFBLEtBQUssR0FBR1EsSUFBSSxDQUFDUixLQUFiO0FBQ0g7O0FBQ0ROLE1BQUFBLFVBQVUsQ0FBQ0csT0FBRCxDQUFWLEdBQXNCRyxLQUF0QjtBQUVBSixNQUFBQSxHQUFHLENBQUNpQixHQUFKLENBQVEsTUFBUixFQUFpQixtQkFBa0JoQixPQUFRLElBQTNDO0FBQ0g7O0FBRURDLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFpQmUsR0FBRCxJQUFTO0FBQ3JCQSxNQUFBQSxHQUFHLENBQUNDLEdBQUosQ0FBUSxlQUFSLEVBQTBCLFVBQVNmLEtBQU0sRUFBekM7QUFDSCxLQUZEO0FBR0gsR0E3Q0Q7QUE4Q0g7O0FBRURnQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QixlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgZ2V0IH0gPSByZXF1aXJlKFwiQGdlbngvanVseVwiKTtcblxuY29uc3QgdG9rZW5DYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBkZWZhdWx0VXNlckF1dGgoYXBwLCB1c2VyVGFnKSB7XG4gICAgcmV0dXJuIGFzeW5jIChjbGllbnQpID0+IHtcbiAgICAgICAgaWYgKCF1c2VyVGFnKSB7XG4gICAgICAgICAgICBkZWxldGUgY2xpZW50Lm9uU2VuZDtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG9rZW4sIHVzZXJBdXRoO1xuXG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QodXNlclRhZykpIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5DYWNoZVt1c2VyVGFnLnVzZXJUYWddO1xuICAgICAgICAgICAgdXNlckF1dGggPSB1c2VyVGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbkNhY2hlW3VzZXJUYWddO1xuICAgICAgICAgICAgdXNlckF1dGggPSBhcHAuc2V0dGluZ3MudXNlckF1dGhbdXNlclRhZ107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICBpZiAoIXVzZXJBdXRoLmVuZHBvaW50IHx8ICF1c2VyQXV0aC51c2VybmFtZSB8fCAhdXNlckF1dGgucGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBcImVuZHBvaW50XCIsIFwidXNlcm5hbWVcIiwgXCJwYXNzd29yZFwiIGlzIHJlcXVpcmVkIGZvciBcInVzZXJBdXRoXCIgc2V0dGluZ3Mgb2YgdXNlciBcIiR7dXNlclRhZ31cIi5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGJvZHkgPSBhd2FpdCBjbGllbnQucG9zdChcbiAgICAgICAgICAgICAgICB1c2VyQXV0aC5lbmRwb2ludCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyQXV0aC51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHVzZXJBdXRoLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXNlckF1dGgucXVlcnksXG4gICAgICAgICAgICAgICAgdXNlckF1dGguaGVhZGVycyA/IHsgaGVhZGVyczogdXNlckF1dGguaGVhZGVycyB9IDogbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICh1c2VyQXV0aC50b2tlbktleSkge1xuICAgICAgICAgICAgICAgIHRva2VuID0gZ2V0KGJvZHksIHVzZXJBdXRoLnRva2VuS2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBib2R5LnRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5DYWNoZVt1c2VyVGFnXSA9IHRva2VuO1xuXG4gICAgICAgICAgICBhcHAubG9nKFwiaW5mb1wiLCBgTG9nZ2VkIGluIHdpdGggWyR7dXNlclRhZ31dLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpZW50Lm9uU2VuZCA9IChyZXEpID0+IHtcbiAgICAgICAgICAgIHJlcS5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHt0b2tlbn1gKTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRVc2VyQXV0aDtcbiJdfQ==