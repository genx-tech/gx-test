"use strict";

require("source-map-support/register");

const {
  _,
  get
} = require("@genx/july");

const tokenCache = {};

function defaultUserAuth(userTag) {
  return async (app, client) => {
    if (!userTag) {
      delete client.onSend;
      return client;
    }

    let token, userAuth;

    if (_.isPlainObject(userTag)) {
      token = tokenCache[userTag.userTag];
      userAuth = userTag;
    } else {
      token = tokenCache[userTag];
      userAuth = app.settings.userAuth[userTag];
    }

    if (!token) {
      if (!userAuth.endpoint || !userAuth.username || !userAuth.password) {
        throw new Error(`"endpoint", "username", "password" is required for "userAuth" settings of user "${userTag}".`);
      }

      let body = await client.post(userAuth.endpoint, {
        username: userAuth.username,
        password: userAuth.password
      }, userAuth.query, userAuth.headers ? {
        headers: userAuth.headers
      } : null);

      if (userAuth.tokenKey) {
        token = get(body, userAuth.tokenKey);
      } else {
        token = body.token;
      }

      tokenCache[userTag] = token;
      app.log("info", `Logged in with [${userTag}].`);
    }

    client.onSend = req => {
      req.set("Authorization", `Bearer ${token}`);
    };
  };
}

module.exports = defaultUserAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0VXNlckF1dGguanMiXSwibmFtZXMiOlsiXyIsImdldCIsInJlcXVpcmUiLCJ0b2tlbkNhY2hlIiwiZGVmYXVsdFVzZXJBdXRoIiwidXNlclRhZyIsImFwcCIsImNsaWVudCIsIm9uU2VuZCIsInRva2VuIiwidXNlckF1dGgiLCJpc1BsYWluT2JqZWN0Iiwic2V0dGluZ3MiLCJlbmRwb2ludCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJFcnJvciIsImJvZHkiLCJwb3N0IiwicXVlcnkiLCJoZWFkZXJzIiwidG9rZW5LZXkiLCJsb2ciLCJyZXEiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBYUMsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBRUEsTUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzlCLFNBQU8sT0FBT0MsR0FBUCxFQUFZQyxNQUFaLEtBQXVCO0FBQzFCLFFBQUksQ0FBQ0YsT0FBTCxFQUFjO0FBQ1YsYUFBT0UsTUFBTSxDQUFDQyxNQUFkO0FBQ0EsYUFBT0QsTUFBUDtBQUNIOztBQUVELFFBQUlFLEtBQUosRUFBV0MsUUFBWDs7QUFFQSxRQUFJVixDQUFDLENBQUNXLGFBQUYsQ0FBZ0JOLE9BQWhCLENBQUosRUFBOEI7QUFDMUJJLE1BQUFBLEtBQUssR0FBR04sVUFBVSxDQUFDRSxPQUFPLENBQUNBLE9BQVQsQ0FBbEI7QUFDQUssTUFBQUEsUUFBUSxHQUFHTCxPQUFYO0FBQ0gsS0FIRCxNQUdPO0FBQ0hJLE1BQUFBLEtBQUssR0FBR04sVUFBVSxDQUFDRSxPQUFELENBQWxCO0FBQ0FLLE1BQUFBLFFBQVEsR0FBR0osR0FBRyxDQUFDTSxRQUFKLENBQWFGLFFBQWIsQ0FBc0JMLE9BQXRCLENBQVg7QUFDSDs7QUFFRCxRQUFJLENBQUNJLEtBQUwsRUFBWTtBQUNSLFVBQUksQ0FBQ0MsUUFBUSxDQUFDRyxRQUFWLElBQXNCLENBQUNILFFBQVEsQ0FBQ0ksUUFBaEMsSUFBNEMsQ0FBQ0osUUFBUSxDQUFDSyxRQUExRCxFQUFvRTtBQUNoRSxjQUFNLElBQUlDLEtBQUosQ0FDRCxtRkFBa0ZYLE9BQVEsSUFEekYsQ0FBTjtBQUdIOztBQUVELFVBQUlZLElBQUksR0FBRyxNQUFNVixNQUFNLENBQUNXLElBQVAsQ0FDYlIsUUFBUSxDQUFDRyxRQURJLEVBRWI7QUFDSUMsUUFBQUEsUUFBUSxFQUFFSixRQUFRLENBQUNJLFFBRHZCO0FBRUlDLFFBQUFBLFFBQVEsRUFBRUwsUUFBUSxDQUFDSztBQUZ2QixPQUZhLEVBTWJMLFFBQVEsQ0FBQ1MsS0FOSSxFQU9iVCxRQUFRLENBQUNVLE9BQVQsR0FBbUI7QUFBRUEsUUFBQUEsT0FBTyxFQUFFVixRQUFRLENBQUNVO0FBQXBCLE9BQW5CLEdBQW1ELElBUHRDLENBQWpCOztBQVNBLFVBQUlWLFFBQVEsQ0FBQ1csUUFBYixFQUF1QjtBQUNuQlosUUFBQUEsS0FBSyxHQUFHUixHQUFHLENBQUNnQixJQUFELEVBQU9QLFFBQVEsQ0FBQ1csUUFBaEIsQ0FBWDtBQUNILE9BRkQsTUFFTztBQUNIWixRQUFBQSxLQUFLLEdBQUdRLElBQUksQ0FBQ1IsS0FBYjtBQUNIOztBQUNETixNQUFBQSxVQUFVLENBQUNFLE9BQUQsQ0FBVixHQUFzQkksS0FBdEI7QUFFQUgsTUFBQUEsR0FBRyxDQUFDZ0IsR0FBSixDQUFRLE1BQVIsRUFBaUIsbUJBQWtCakIsT0FBUSxJQUEzQztBQUNIOztBQUVERSxJQUFBQSxNQUFNLENBQUNDLE1BQVAsR0FBaUJlLEdBQUQsSUFBUztBQUNyQkEsTUFBQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsZUFBUixFQUEwQixVQUFTZixLQUFNLEVBQXpDO0FBQ0gsS0FGRDtBQUdILEdBN0NEO0FBOENIOztBQUVEZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8sIGdldCB9ID0gcmVxdWlyZShcIkBnZW54L2p1bHlcIik7XG5cbmNvbnN0IHRva2VuQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZGVmYXVsdFVzZXJBdXRoKHVzZXJUYWcpIHtcbiAgICByZXR1cm4gYXN5bmMgKGFwcCwgY2xpZW50KSA9PiB7XG4gICAgICAgIGlmICghdXNlclRhZykge1xuICAgICAgICAgICAgZGVsZXRlIGNsaWVudC5vblNlbmQ7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRva2VuLCB1c2VyQXV0aDtcblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHVzZXJUYWcpKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuQ2FjaGVbdXNlclRhZy51c2VyVGFnXTtcbiAgICAgICAgICAgIHVzZXJBdXRoID0gdXNlclRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5DYWNoZVt1c2VyVGFnXTtcbiAgICAgICAgICAgIHVzZXJBdXRoID0gYXBwLnNldHRpbmdzLnVzZXJBdXRoW3VzZXJUYWddO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgaWYgKCF1c2VyQXV0aC5lbmRwb2ludCB8fCAhdXNlckF1dGgudXNlcm5hbWUgfHwgIXVzZXJBdXRoLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgXCJlbmRwb2ludFwiLCBcInVzZXJuYW1lXCIsIFwicGFzc3dvcmRcIiBpcyByZXF1aXJlZCBmb3IgXCJ1c2VyQXV0aFwiIHNldHRpbmdzIG9mIHVzZXIgXCIke3VzZXJUYWd9XCIuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBib2R5ID0gYXdhaXQgY2xpZW50LnBvc3QoXG4gICAgICAgICAgICAgICAgdXNlckF1dGguZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckF1dGgudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB1c2VyQXV0aC5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVzZXJBdXRoLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIHVzZXJBdXRoLmhlYWRlcnMgPyB7IGhlYWRlcnM6IHVzZXJBdXRoLmhlYWRlcnMgfSA6IG51bGxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodXNlckF1dGgudG9rZW5LZXkpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGdldChib2R5LCB1c2VyQXV0aC50b2tlbktleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRva2VuID0gYm9keS50b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2VuQ2FjaGVbdXNlclRhZ10gPSB0b2tlbjtcblxuICAgICAgICAgICAgYXBwLmxvZyhcImluZm9cIiwgYExvZ2dlZCBpbiB3aXRoIFske3VzZXJUYWd9XS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaWVudC5vblNlbmQgPSAocmVxKSA9PiB7XG4gICAgICAgICAgICByZXEuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dG9rZW59YCk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0VXNlckF1dGg7XG4iXX0=