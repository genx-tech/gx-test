"use strict";

require("source-map-support/register");

const {
  _,
  get
} = require("@genx/july");

const tokenCache = {};

function defaultUserAuth(app, userTag) {
  return async client => {
    if (!userTag) {
      delete client.onSend;
      return client;
    }

    let token, userAuth;

    if (_.isPlainObject(userTag)) {
      token = tokenCache[userTag.userTag];
      userAuth = userTag;
    } else {
      token = tokenCache[userTag];
      userAuth = app.settings.userAuth[userTag];
    }

    if (!token) {
      if (!userAuth.endpoint || !userAuth.username || !userAuth.password) {
        throw new Error(`"endpoint", "username", "password" is required for "userAuth" settings of user "${userTag}".`);
      }

      let body = await client.post(userAuth.endpoint, {
        username: userAuth.username,
        password: userAuth.password
      });

      if (userAuth.tokenKey) {
        token = get(body, userAuth.tokenKey);
      } else {
        token = body.token;
      }

      tokenCache[userTag] = token;
      app.log("info", `Logged in with [${userTag}].`);
    }

    client.onSend = req => {
      req.set("Authorization", `Bearer ${token}`);
    };
  };
}

module.exports = defaultUserAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0VXNlckF1dGguanMiXSwibmFtZXMiOlsiXyIsImdldCIsInJlcXVpcmUiLCJ0b2tlbkNhY2hlIiwiZGVmYXVsdFVzZXJBdXRoIiwiYXBwIiwidXNlclRhZyIsImNsaWVudCIsIm9uU2VuZCIsInRva2VuIiwidXNlckF1dGgiLCJpc1BsYWluT2JqZWN0Iiwic2V0dGluZ3MiLCJlbmRwb2ludCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJFcnJvciIsImJvZHkiLCJwb3N0IiwidG9rZW5LZXkiLCJsb2ciLCJyZXEiLCJzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBYUMsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBRUEsTUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxPQUE5QixFQUF1QztBQUNuQyxTQUFPLE1BQU9DLE1BQVAsSUFBa0I7QUFDckIsUUFBSSxDQUFDRCxPQUFMLEVBQWM7QUFDVixhQUFPQyxNQUFNLENBQUNDLE1BQWQ7QUFDQSxhQUFPRCxNQUFQO0FBQ0g7O0FBRUQsUUFBSUUsS0FBSixFQUFXQyxRQUFYOztBQUVBLFFBQUlWLENBQUMsQ0FBQ1csYUFBRixDQUFnQkwsT0FBaEIsQ0FBSixFQUE4QjtBQUMxQkcsTUFBQUEsS0FBSyxHQUFHTixVQUFVLENBQUNHLE9BQU8sQ0FBQ0EsT0FBVCxDQUFsQjtBQUNBSSxNQUFBQSxRQUFRLEdBQUdKLE9BQVg7QUFDSCxLQUhELE1BR087QUFDSEcsTUFBQUEsS0FBSyxHQUFHTixVQUFVLENBQUNHLE9BQUQsQ0FBbEI7QUFDQUksTUFBQUEsUUFBUSxHQUFHTCxHQUFHLENBQUNPLFFBQUosQ0FBYUYsUUFBYixDQUFzQkosT0FBdEIsQ0FBWDtBQUNIOztBQUVELFFBQUksQ0FBQ0csS0FBTCxFQUFZO0FBQ1IsVUFBSSxDQUFDQyxRQUFRLENBQUNHLFFBQVYsSUFBc0IsQ0FBQ0gsUUFBUSxDQUFDSSxRQUFoQyxJQUE0QyxDQUFDSixRQUFRLENBQUNLLFFBQTFELEVBQW9FO0FBQ2hFLGNBQU0sSUFBSUMsS0FBSixDQUNELG1GQUFrRlYsT0FBUSxJQUR6RixDQUFOO0FBR0g7O0FBRUQsVUFBSVcsSUFBSSxHQUFHLE1BQU1WLE1BQU0sQ0FBQ1csSUFBUCxDQUFZUixRQUFRLENBQUNHLFFBQXJCLEVBQStCO0FBQzVDQyxRQUFBQSxRQUFRLEVBQUVKLFFBQVEsQ0FBQ0ksUUFEeUI7QUFFNUNDLFFBQUFBLFFBQVEsRUFBRUwsUUFBUSxDQUFDSztBQUZ5QixPQUEvQixDQUFqQjs7QUFJQSxVQUFJTCxRQUFRLENBQUNTLFFBQWIsRUFBdUI7QUFDbkJWLFFBQUFBLEtBQUssR0FBR1IsR0FBRyxDQUFDZ0IsSUFBRCxFQUFPUCxRQUFRLENBQUNTLFFBQWhCLENBQVg7QUFDSCxPQUZELE1BRU87QUFDSFYsUUFBQUEsS0FBSyxHQUFHUSxJQUFJLENBQUNSLEtBQWI7QUFDSDs7QUFDRE4sTUFBQUEsVUFBVSxDQUFDRyxPQUFELENBQVYsR0FBc0JHLEtBQXRCO0FBRUFKLE1BQUFBLEdBQUcsQ0FBQ2UsR0FBSixDQUFRLE1BQVIsRUFBaUIsbUJBQWtCZCxPQUFRLElBQTNDO0FBQ0g7O0FBRURDLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFpQmEsR0FBRCxJQUFTO0FBQ3JCQSxNQUFBQSxHQUFHLENBQUNDLEdBQUosQ0FBUSxlQUFSLEVBQTBCLFVBQVNiLEtBQU0sRUFBekM7QUFDSCxLQUZEO0FBR0gsR0F4Q0Q7QUF5Q0g7O0FBRURjLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCBnZXQgfSA9IHJlcXVpcmUoXCJAZ2VueC9qdWx5XCIpO1xuXG5jb25zdCB0b2tlbkNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGRlZmF1bHRVc2VyQXV0aChhcHAsIHVzZXJUYWcpIHtcbiAgICByZXR1cm4gYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICBpZiAoIXVzZXJUYWcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjbGllbnQub25TZW5kO1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b2tlbiwgdXNlckF1dGg7XG5cbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh1c2VyVGFnKSkge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbkNhY2hlW3VzZXJUYWcudXNlclRhZ107XG4gICAgICAgICAgICB1c2VyQXV0aCA9IHVzZXJUYWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuQ2FjaGVbdXNlclRhZ107XG4gICAgICAgICAgICB1c2VyQXV0aCA9IGFwcC5zZXR0aW5ncy51c2VyQXV0aFt1c2VyVGFnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIGlmICghdXNlckF1dGguZW5kcG9pbnQgfHwgIXVzZXJBdXRoLnVzZXJuYW1lIHx8ICF1c2VyQXV0aC5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFwiZW5kcG9pbnRcIiwgXCJ1c2VybmFtZVwiLCBcInBhc3N3b3JkXCIgaXMgcmVxdWlyZWQgZm9yIFwidXNlckF1dGhcIiBzZXR0aW5ncyBvZiB1c2VyIFwiJHt1c2VyVGFnfVwiLmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgYm9keSA9IGF3YWl0IGNsaWVudC5wb3N0KHVzZXJBdXRoLmVuZHBvaW50LCB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJBdXRoLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB1c2VyQXV0aC5wYXNzd29yZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHVzZXJBdXRoLnRva2VuS2V5KSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBnZXQoYm9keSwgdXNlckF1dGgudG9rZW5LZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGJvZHkudG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbkNhY2hlW3VzZXJUYWddID0gdG9rZW47XG5cbiAgICAgICAgICAgIGFwcC5sb2coXCJpbmZvXCIsIGBMb2dnZWQgaW4gd2l0aCBbJHt1c2VyVGFnfV0uYCk7XG4gICAgICAgIH1cblxuICAgICAgICBjbGllbnQub25TZW5kID0gKHJlcSkgPT4ge1xuICAgICAgICAgICAgcmVxLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke3Rva2VufWApO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdFVzZXJBdXRoO1xuIl19