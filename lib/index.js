"use strict";

require("source-map-support/register");

if (process.env.ASYNC_DUMP) {
  require('./asyncDump');
}

const path = require('path');

const {
  _,
  fs
} = require('rk-utils');

const Suite = require('./Suite');

let allure;

module.exports = (file, body, {
  before: onBefore,
  after: onAfter,
  serverEntry,
  verbose
} = {}) => {
  const suiteName = path.basename(file, '.spec.js');
  const suite = new Suite(suiteName, {
    serverEntry,
    verbose
  });
  const testOptsFile = path.resolve('test/test.local.js');
  let opt;

  if (fs.existsSync(testOptsFile)) {
    const testOpts = require(testOptsFile);

    const only = new Set(testOpts.only);

    if (only.has(suiteName)) {
      opt = 'only';
    } else {
      if (!_.isEmpty(testOpts.only)) {
        console.log(`Suite "${suiteName}" skipped.`);
      } else {
        const skip = new Set(testOpts.skip);

        if (skip.has(suiteName)) {
          opt = 'skip';
          console.log(`Suite "${suiteName}" skipped.`);
        }
      }
    }
  }

  (opt ? describe[opt] : describe)(suiteName, function () {
    before(async () => {
      if (!allure) {
        const allureMocha = require('allure-mocha/runtime');

        allure = allureMocha.allure;
      }

      if (verbose) {
        console.log('Starting suite:', suiteName);
      }

      if (process.env.COVER_MODE) {
        await suite.startWebServer_();
      }

      if (onBefore) {
        await onBefore();
      }
    });
    after(async () => {
      await suite.stopWebServerIfStarted_();

      if (onAfter) {
        await onAfter();
      }

      if (verbose) {
        console.log('Finished suite:', suiteName);
      }

      console.log();

      if (process.env.ASYNC_DUMP) {
        asyncDump(process.env.ASYNC_DUMP.length > 1 ? process.env.ASYNC_DUMP : null);
      }
    });
    body(suite);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiQVNZTkNfRFVNUCIsInJlcXVpcmUiLCJwYXRoIiwiXyIsImZzIiwiU3VpdGUiLCJhbGx1cmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlsZSIsImJvZHkiLCJiZWZvcmUiLCJvbkJlZm9yZSIsImFmdGVyIiwib25BZnRlciIsInNlcnZlckVudHJ5IiwidmVyYm9zZSIsInN1aXRlTmFtZSIsImJhc2VuYW1lIiwic3VpdGUiLCJ0ZXN0T3B0c0ZpbGUiLCJyZXNvbHZlIiwib3B0IiwiZXhpc3RzU3luYyIsInRlc3RPcHRzIiwib25seSIsIlNldCIsImhhcyIsImlzRW1wdHkiLCJjb25zb2xlIiwibG9nIiwic2tpcCIsImRlc2NyaWJlIiwiYWxsdXJlTW9jaGEiLCJDT1ZFUl9NT0RFIiwic3RhcnRXZWJTZXJ2ZXJfIiwic3RvcFdlYlNlcnZlcklmU3RhcnRlZF8iLCJhc3luY0R1bXAiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBaEIsRUFBNEI7QUFDeEJDLEVBQUFBLE9BQU8sQ0FBQyxhQUFELENBQVA7QUFDSDs7QUFFRCxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQVlILE9BQU8sQ0FBQyxVQUFELENBQXpCOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBRUEsSUFBSUssTUFBSjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhO0FBQUVDLEVBQUFBLE1BQU0sRUFBRUMsUUFBVjtBQUFvQkMsRUFBQUEsS0FBSyxFQUFFQyxPQUEzQjtBQUFvQ0MsRUFBQUEsV0FBcEM7QUFBaURDLEVBQUFBO0FBQWpELElBQTZELEVBQTFF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Y2Vzcy5lbnYuQVNZTkNfRFVNUCkge1xuICAgIHJlcXVpcmUoJy4vYXN5bmNEdW1wJyk7XG59XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgU3VpdGUgPSByZXF1aXJlKCcuL1N1aXRlJyk7XG5cbmxldCBhbGx1cmU7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZpbGUsIGJvZHksIHsgYmVmb3JlOiBvbkJlZm9yZSwgYWZ0ZXI6IG9uQWZ0ZXIsIHNlcnZlckVudHJ5LCB2ZXJib3NlIH0gPSB7fSkgPT4ge1xuICAgIGNvbnN0IHN1aXRlTmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZSwgJy5zcGVjLmpzJyk7XG4gICAgY29uc3Qgc3VpdGUgPSBuZXcgU3VpdGUoc3VpdGVOYW1lLCB7IHNlcnZlckVudHJ5LCB2ZXJib3NlIH0pO1xuXG4gICAgY29uc3QgdGVzdE9wdHNGaWxlID0gcGF0aC5yZXNvbHZlKCd0ZXN0L3Rlc3QubG9jYWwuanMnKTtcblxuICAgIGxldCBvcHQ7ICAgIFxuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmModGVzdE9wdHNGaWxlKSkge1xuICAgICAgICBjb25zdCB0ZXN0T3B0cyA9IHJlcXVpcmUodGVzdE9wdHNGaWxlKTsgICAgICAgIFxuICAgICAgICBjb25zdCBvbmx5ID0gbmV3IFNldCh0ZXN0T3B0cy5vbmx5KTsgICAgICAgIFxuXG4gICAgICAgIGlmIChvbmx5LmhhcyhzdWl0ZU5hbWUpKSB7XG4gICAgICAgICAgICBvcHQgPSAnb25seSc7ICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eSh0ZXN0T3B0cy5vbmx5KSkgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3VpdGUgXCIke3N1aXRlTmFtZX1cIiBza2lwcGVkLmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lwID0gbmV3IFNldCh0ZXN0T3B0cy5za2lwKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcC5oYXMoc3VpdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHQgPSAnc2tpcCc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTdWl0ZSBcIiR7c3VpdGVOYW1lfVwiIHNraXBwZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICAob3B0ID8gZGVzY3JpYmVbb3B0XSA6IGRlc2NyaWJlKShzdWl0ZU5hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICghYWxsdXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsdXJlTW9jaGEgPSByZXF1aXJlKCdhbGx1cmUtbW9jaGEvcnVudGltZScpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFsbHVyZSA9IGFsbHVyZU1vY2hhLmFsbHVyZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgc3VpdGU6Jywgc3VpdGVOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkNPVkVSX01PREUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzdWl0ZS5zdGFydFdlYlNlcnZlcl8oKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgaWYgKG9uQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25CZWZvcmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7ICAgXG5cbiAgICAgICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgc3VpdGUuc3RvcFdlYlNlcnZlcklmU3RhcnRlZF8oKTsgICAgXG5cbiAgICAgICAgICAgIGlmIChvbkFmdGVyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25BZnRlcigpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZpbmlzaGVkIHN1aXRlOicsIHN1aXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygpO1xuXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuQVNZTkNfRFVNUCkge1xuICAgICAgICAgICAgICAgIGFzeW5jRHVtcChwcm9jZXNzLmVudi5BU1lOQ19EVU1QLmxlbmd0aCA+IDEgPyBwcm9jZXNzLmVudi5BU1lOQ19EVU1QIDogbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pOyBcblxuICAgICAgICBib2R5KHN1aXRlKTtcbiAgICB9KTtcbn0iXX0=