{"version":3,"sources":["../src/Suite.js"],"sourcesContent":["const path = require(\"path\");\nconst { _ } = require(\"@genx/july\");\n\nconst defaultUserAuth = require(\"./defaultUserAuth\");\n\nlet allure;\n\n/**\n * Test function with a connected rest client.\n * @callback testWithRestClient\n * @param {App} app - The app\n * @param {RestClient} client - The rest client\n */\n\n/**\n * Test function with a worker app.\n * @callback testWithApp\n * @param {App} app - The app\n */\n\n/**\n * Test case body.\n * @callback testCaseBody\n * @param {*} data - Test data\n */\n\n/**\n * Test suite object.\n * @class\n */\nclass Suite {\n    /**\n     * [private] Suite will be created by testSuite creator.\n     * @param {string} name - Suite name\n     * @param {object} [options] - Suite options\n     * @property {string} [options.serverEntry=\"../../src/index.js\"] - The entry file of @genx/server instance.\n     * @property {boolean} [options.verbose=false] - Verbose mode.\n     */\n    constructor(name, options) {\n        this.name = name;\n        const { serverEntry, verbose, testDir } = options == null ? {} : options;\n\n        this.serverEntry = serverEntry;\n        this.verbose = verbose;\n        this.testDir = testDir;\n    }\n\n    /**\n     * Start the @genx/server instance for code coverage testing.\n     * @async\n     * @private\n     */\n    async startWebServer_() {\n        if (this.webServer) {\n            throw new Error(\"Web server already started.\");\n        }\n\n        const createWebServer = this.serverEntry\n            ? require(this.serverEntry)\n            : require.main.require(\"../../src/index.js\");\n        this.webServer = createWebServer({\n            exitOnUncaught: false,\n        });\n        this.webServer.started == null || this.webServer.started.should.not.be.ok();\n\n        await this.webServer.start_();\n\n        this.webServer.started.should.be.ok();\n\n        return this.webServer;\n    }\n\n    /**\n     * Stop the server if it is started.\n     * @async\n     * @private\n     */\n    async stopWebServerIfStarted_() {\n        if (this.webServer) {\n            if (this.webServer.started) {\n                await this.webServer.stop_();\n            }\n\n            delete this.webServer;\n        }\n    }\n\n    /**\n     * Start a worker app for testing\n     * @param {testWithRestClient} testToRun - Test function with a connected rest client.\n     * @param {*} options - Options passed the test worker, see startWorker of @genx/app.\n     * @async\n     */\n    async startWorker_(testToRun, options) {\n        const {\n            Starters: { startWorker },\n        } = require(\"@genx/app\");\n\n        let err;\n\n        await startWorker(\n            async (app) => {\n                try {\n                    await testToRun(app);\n                } catch (e) {\n                    err = e;\n                }\n            },\n            {\n                workerName: \"tester\",\n                configName: \"test\",\n                configPath: path.join(\".\", this.testDir, 'conf'),\n                appModulesPath: \"app_modules\",\n                ignoreUncaught: true,\n                ...options,\n            }\n        );\n\n        if (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * Start a rest client for testing\n     * @param {string} serviceName - The config key of target endpoint\n     * @param {function|string} [authenticator] - Authenticator to be used, async (client) => {}, or pass a userTag to use default authenticator.\n     * @param {testWithRestClient} testToRun - Test function with a connected rest client.\n     * @param {*} [options] - Options passed the test worker, see startWorker of @genx/app.\n     * @async\n     */\n    async startRestClient_(serviceName, authenticator, testToRun, options) {\n        return this.startWorker_(async (app) => {\n            if (typeof options === \"undefined\") {\n                if (typeof testToRun === \"undefined\") {\n                    testToRun = authenticator;\n                    authenticator = null;\n                } else if (typeof testToRun === \"object\") {\n                    options = testToRun;\n                    testToRun = authenticator;\n                    authenticator = null;\n                }\n            }\n\n            if (typeof authenticator === \"string\") {\n                authenticator = defaultUserAuth(authenticator);\n            }\n\n            const client = await this._getRestClient_(app, serviceName, authenticator);\n            return testToRun(app, client);\n        }, options);\n    }\n\n    /**\n     * @private\n     */\n    initAllure() {\n        if (!allure) {\n            const allureMocha = require(\"allure-mocha/runtime\");\n            allure = allureMocha.allure;\n        }\n    }\n\n    /**\n     * Define a test case.\n     * @param {string} story - Test case title.\n     * @param {testCaseBody} body - Test case body to write actual test code.\n     * @param {object} [options]\n     * @property {*} options.data - Test data\n     * @property {function} options.cleanUp - Cleanup after the case ends regardless whether it is successful or not.\n     */\n    testCase(story, body, options) {\n        const { data, cleanUp, skip, only } = options == null ? {} : options;\n        const self = this;\n\n        let opt;\n\n        if (only) {\n            opt = \"only\";\n        } else if (skip) {\n            opt = \"skip\";\n        }\n\n        (opt ? it[opt] : it)(story, async function () {\n            if (self.verbose) {\n                console.log(\"Starting story:\", story);\n            }\n\n            if (allure) {\n                if (data) {\n                    const { description, epic, feature, owner, tag, issues, severity } = data.allure;\n\n                    description && allure.description(description);\n                    epic && allure.epic(epic);\n                    feature && allure.feature(feature);\n                    owner && allure.owner(owner);\n                    tag && allure.tag(tag);\n                    severity && allure.severity(severity);\n\n                    _.isEmpty(issues) ||\n                        _.forOwn(issues, (link, num) => {\n                            allure.issue(num, link);\n                        });\n                }\n\n                allure.story(story);\n                allure.createStep(`start ${story}`, () => {})();\n\n                if (data && data.params) {\n                    _.forOwn(data.params, (v, k) => {\n                        if (typeof v === \"object\") {\n                            allure.parameter(k, \"*see attachment*\");\n                            self.attachObject(`param[${k}]`, v);\n                        } else {\n                            allure.parameter(k, v);\n                        }\n                    });\n                }\n            }            \n\n            if (cleanUp) {\n                try {\n                    await body(data);\n                } finally {\n                    await cleanUp();\n                }\n            } else {\n                await body(data);\n            }\n        });\n    }\n\n    /**\n     * Test case with fixtures.\n     * @param {string} story\n     * @param {testCaseBody} body\n     * @param {Object} [options]\n     */\n    testCaseFromFixtures(story, body, options) {\n        const p = path.resolve(this.testDir, `fixtures/${this.name}.js`);\n        const suiteData = require(p);\n        if (!suiteData) throw new Error(`Suite data not found. Suite: ${this.name}`);\n\n        const { cases, ...others } = suiteData;\n\n        const storyData = cases && cases[story];\n        if (!storyData) throw new Error(`Story data not found. Suite: ${this.name}, story: ${story}`);\n\n        _.castArray(storyData).forEach((caseData, i) => {\n            const preparedData = {\n                allure: others,\n                params: _.mapValues(caseData.params, (v) => {\n                    if (typeof v === \"function\") return v();\n                    return v;\n                }),\n                expected: caseData.expected,\n            };\n\n            this.testCase(`${story}#${i + 1}`, body, { ...options, data: preparedData });\n        });\n    }\n\n    /**\n     * Run benchmark against given methods.\n     * @param {*} mapOfMethods - Map of name to function with payload\n     * @param {*} payload\n     */\n    async benchmark_(mapOfMethods, payload) {\n        const Benchmark = require(\"benchmark\");\n        const suite = new Benchmark.Suite();\n\n        _.each(mapOfMethods, (f, name) => {\n            suite.add(name, function () {\n                f(payload);\n            });\n        });\n\n        return new Promise((resolve, reject) => {\n            const self = this;\n\n            suite\n                .on(\"cycle\", (event) => {\n                    const cycleMessage = String(event.target);\n                    console.log(cycleMessage);\n                    this.attachObject(\"cycle\", cycleMessage);\n                })\n                .on(\"complete\", function () {\n                    const completeMessage = \"The fastest is \" + this.filter(\"fastest\").map(\"name\");\n                    console.log(completeMessage);\n                    self.attachObject(\"complete\", completeMessage);\n                    resolve();\n                })\n                .on(\"error\", (event) => reject(String(event.target)))\n                .run({ async: true });\n        });\n    }\n\n    /**\n     * Define a test step.\n     * @param {string} step\n     * @param {function} [body] - Test step body\n     */\n    async testStep_(step, body) {\n        const stepFn_ = allure ? allure.createStep(step, () => body()) : body;\n\n        if (this.verbose) {\n            console.log(\"Step: \", step);\n        }\n\n        await stepFn_();\n    }\n\n    /**\n     * Attach an object to the test report.\n     * @param {string} name\n     * @param {*} obj\n     */\n    attachObject(name, obj) {\n        if (!allure) return;\n\n        let type = \"text/plain\",\n            content = obj;\n\n        if (typeof obj !== \"string\") {\n            content = JSON.stringify(obj, null, 4);\n            type = \"application/json\";\n        }\n\n        allure.createAttachment(name, content, type);\n    }\n\n    async _getRestClient_(app, name, authenticator) {\n        const client = app.getService(this.webServer ? `superTest-${name}` : `restClient-${name}`);\n        if (this.webServer) {\n            client.server = this.webServer.httpServer;\n        }\n\n        if (!client.onSent) {\n            client.onSent = (url, result) => {\n                this.attachObject(url, result);\n            };\n        }\n\n        if (!authenticator) {\n            delete client.onSend;\n            return client;\n        }\n\n        await authenticator(app, client);\n\n        return client;\n    }\n}\n\nmodule.exports = Suite;\n"],"names":["path","require","_","defaultUserAuth","allure","Suite","constructor","name","options","serverEntry","verbose","testDir","startWebServer_","webServer","Error","createWebServer","main","exitOnUncaught","started","should","not","be","ok","start_","stopWebServerIfStarted_","stop_","startWorker_","testToRun","Starters","startWorker","err","app","e","workerName","configName","configPath","join","appModulesPath","ignoreUncaught","startRestClient_","serviceName","authenticator","client","_getRestClient_","initAllure","allureMocha","testCase","story","body","data","cleanUp","skip","only","self","opt","it","console","log","description","epic","feature","owner","tag","issues","severity","isEmpty","forOwn","link","num","issue","createStep","params","v","k","parameter","attachObject","testCaseFromFixtures","p","resolve","suiteData","cases","others","storyData","castArray","forEach","caseData","i","preparedData","mapValues","expected","benchmark_","mapOfMethods","payload","Benchmark","suite","each","f","add","Promise","reject","on","event","cycleMessage","String","target","completeMessage","filter","map","run","async","testStep_","step","stepFn_","obj","type","content","JSON","stringify","createAttachment","getService","server","httpServer","onSent","url","result","onSend","module","exports"],"mappings":"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"}