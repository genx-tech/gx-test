"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _
} = require('rk-utils');

const {
  Starters: {
    startWorker
  }
} = require('@genx/app');

const tokenCache = {};
let allure;

class Suite {
  constructor(name, {
    serverEntry,
    verbose
  }) {
    this.name = name;
    this.serverEntry = serverEntry || '../../src/index.js';
    this.verbose = verbose;
  }

  async startWebServer_() {
    if (this.webServer) {
      throw new Error('Web server already started.');
    }

    const createWebServer = require(this.serverEntry);

    this.webServer = createWebServer({
      exitOnUncaught: false
    });
    this.webServer.started == null || this.webServer.started.should.not.be.ok();
    await this.webServer.start_();
    this.webServer.started.should.be.ok();
    return this.webServer;
  }

  async stopWebServerIfStarted_() {
    if (this.webServer) {
      if (this.webServer.started) {
        await this.webServer.stop_();
      }

      delete this.webServer;
    }
  }

  async startRestClient_(name, userTag, testToRun, options) {
    let err;
    await startWorker(async app => {
      const client = await this._getRestClient_(app, name, userTag);

      try {
        await testToRun(app, client);
      } catch (e) {
        err = e;
      }
    }, {
      workerName: "tester",
      configName: "test",
      configPath: "./test/conf",
      appModulesPath: "app_modules",
      ignoreUncaught: true,
      ...options
    });

    if (err) {
      should.not.exist(err, err.message || err);
    }
  }

  initAllure() {
    if (!allure) {
      const allureMocha = require('allure-mocha/runtime');

      allure = allureMocha.allure;
    }
  }

  testCase(story, body, data) {
    it(story, async function () {
      if (this.verbose) {
        console.log('Starting story:', story);
      }

      if (allure) {
        if (data) {
          const {
            description,
            epic,
            feature,
            owner,
            tag,
            issues,
            severity
          } = data.allure;
          description && allure.description(description);
          epic && allure.epic(epic);
          feature && allure.feature(feature);
          owner && allure.owner(owner);
          tag && allure.tag(tag);
          severity && allure.severity(severity);
          _.isEmpty(issues) || _.forOwn(issues, (link, num) => {
            allure.issue(num, link);
          });
        }

        allure.story(story);
        allure.createStep(`start ${story}`, () => {})();

        if (data && data.params) {
          _.forOwn(data.params, (v, k) => {
            if (typeof v === 'object') {
              allure.parameter(k, '*see attachment*');
              attachObject(`param[${k}]`, v);
            } else {
              allure.parameter(k, v);
            }
          });
        }
      }

      await body(data);
    });
  }

  testCaseFromFixtures(story, body) {
    const p = path.resolve(`test/fixtures/${this.name}.js`);

    const suiteData = require(p);

    if (!suiteData) throw new Error(`Suite data not found. Suite: ${this.name}`);
    const {
      cases,
      ...others
    } = suiteData;
    const storyData = cases && cases[story];
    if (!storyData) throw new Error(`Story data not found. Suite: ${this.name}, story: ${story}`);

    _.castArray(storyData).forEach((caseData, i) => {
      const preparedData = {
        allure: others,
        params: _.mapValues(caseData.params, v => {
          if (typeof v === 'function') return v();
          return v;
        }),
        expected: caseData.expected
      };
      this.testCase(`${story}#${i + 1}`, body, preparedData);
    });
  }

  async testStep_(step, body) {
    if (allure) {
      allure.createStep(step, () => {})();
    }

    if (this.verbose) {
      console.log('Step: ', step);
    }

    await body();
  }

  attachObject(name, obj) {
    if (!allure) return;
    let type = 'plain/text',
        content = obj;

    if (typeof obj !== 'string') {
      content = JSON.stringify(obj, null, 4);
      type = 'application/json';
    }

    allure.createAttachment(name, content, type);
  }

  async _getRestClient_(app, name, userTag) {
    const client = app.getService(this.webServer ? `superTest.${name}` : `restClient.${name}`);

    if (this.webServer) {
      client.server = this.webServer.httpServer;
    }

    if (!client.onSent) {
      client.onSent = (url, result) => {
        this.attachObject(url, result);
      };
    }

    if (!userTag) {
      delete client.onSend;
      return client;
    }

    let token, userAuth;

    if (_.isPlainObject(userTag)) {
      token = tokenCache[userTag.userTag];
      userAuth = userTag;
    } else {
      token = tokenCache[userTag];
      userAuth = app.settings.userAuth[userTag];
    }

    if (!token) {
      let res = await client.post(userAuth.endpoint, {
        username: userAuth.username,
        password: userAuth.password
      });
      token = res.token;
      tokenCache[userTag] = token;
      app.log('info', `Logged in with [${userTag}].`);
    }

    client.onSend = req => {
      req.set('Authorization', `Bearer ${token}`);
    };

    return client;
  }

}

module.exports = Suite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TdWl0ZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJTdGFydGVycyIsInN0YXJ0V29ya2VyIiwidG9rZW5DYWNoZSIsImFsbHVyZSIsIlN1aXRlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwic2VydmVyRW50cnkiLCJ2ZXJib3NlIiwic3RhcnRXZWJTZXJ2ZXJfIiwid2ViU2VydmVyIiwiRXJyb3IiLCJjcmVhdGVXZWJTZXJ2ZXIiLCJleGl0T25VbmNhdWdodCIsInN0YXJ0ZWQiLCJzaG91bGQiLCJub3QiLCJiZSIsIm9rIiwic3RhcnRfIiwic3RvcFdlYlNlcnZlcklmU3RhcnRlZF8iLCJzdG9wXyIsInN0YXJ0UmVzdENsaWVudF8iLCJ1c2VyVGFnIiwidGVzdFRvUnVuIiwib3B0aW9ucyIsImVyciIsImFwcCIsImNsaWVudCIsIl9nZXRSZXN0Q2xpZW50XyIsImUiLCJ3b3JrZXJOYW1lIiwiY29uZmlnTmFtZSIsImNvbmZpZ1BhdGgiLCJhcHBNb2R1bGVzUGF0aCIsImlnbm9yZVVuY2F1Z2h0IiwiZXhpc3QiLCJtZXNzYWdlIiwiaW5pdEFsbHVyZSIsImFsbHVyZU1vY2hhIiwidGVzdENhc2UiLCJzdG9yeSIsImJvZHkiLCJkYXRhIiwiaXQiLCJjb25zb2xlIiwibG9nIiwiZGVzY3JpcHRpb24iLCJlcGljIiwiZmVhdHVyZSIsIm93bmVyIiwidGFnIiwiaXNzdWVzIiwic2V2ZXJpdHkiLCJpc0VtcHR5IiwiZm9yT3duIiwibGluayIsIm51bSIsImlzc3VlIiwiY3JlYXRlU3RlcCIsInBhcmFtcyIsInYiLCJrIiwicGFyYW1ldGVyIiwiYXR0YWNoT2JqZWN0IiwidGVzdENhc2VGcm9tRml4dHVyZXMiLCJwIiwicmVzb2x2ZSIsInN1aXRlRGF0YSIsImNhc2VzIiwib3RoZXJzIiwic3RvcnlEYXRhIiwiY2FzdEFycmF5IiwiZm9yRWFjaCIsImNhc2VEYXRhIiwiaSIsInByZXBhcmVkRGF0YSIsIm1hcFZhbHVlcyIsImV4cGVjdGVkIiwidGVzdFN0ZXBfIiwic3RlcCIsIm9iaiIsInR5cGUiLCJjb250ZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZUF0dGFjaG1lbnQiLCJnZXRTZXJ2aWNlIiwic2VydmVyIiwiaHR0cFNlcnZlciIsIm9uU2VudCIsInVybCIsInJlc3VsdCIsIm9uU2VuZCIsInRva2VuIiwidXNlckF1dGgiLCJpc1BsYWluT2JqZWN0Iiwic2V0dGluZ3MiLCJyZXMiLCJwb3N0IiwiZW5kcG9pbnQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicmVxIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFELE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsUUFBUSxFQUFFO0FBQUVDLElBQUFBO0FBQUY7QUFBWixJQUFnQ0gsT0FBTyxDQUFDLFdBQUQsQ0FBN0M7O0FBRUEsTUFBTUksVUFBVSxHQUFHLEVBQW5CO0FBQ0EsSUFBSUMsTUFBSjs7QUFFQSxNQUFNQyxLQUFOLENBQVk7QUFDUkMsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU87QUFBRUMsSUFBQUEsV0FBRjtBQUFlQyxJQUFBQTtBQUFmLEdBQVAsRUFBaUM7QUFDeEMsU0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQkEsV0FBVyxJQUFJLG9CQUFsQztBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNIOztBQU1ELFFBQU1DLGVBQU4sR0FBd0I7QUFDcEIsUUFBSSxLQUFLQyxTQUFULEVBQW9CO0FBQ2hCLFlBQU0sSUFBSUMsS0FBSixDQUFVLDZCQUFWLENBQU47QUFDSDs7QUFFRCxVQUFNQyxlQUFlLEdBQUdkLE9BQU8sQ0FBQyxLQUFLUyxXQUFOLENBQS9COztBQUNBLFNBQUtHLFNBQUwsR0FBaUJFLGVBQWUsQ0FBQztBQUM3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QUFDbUIsR0FBSixDQUFRLE1BQVIsRUFBaUIsbUJBQWtCdkIsT0FBUSxJQUEzQztBQUNIOztBQUVESyxJQUFBQSxNQUFNLENBQUNpRSxNQUFQLEdBQWlCVSxHQUFELElBQVM7QUFDckJBLE1BQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLGVBQVIsRUFBMEIsVUFBU1YsS0FBTSxFQUF6QztBQUNILEtBRkQ7O0FBSUEsV0FBT2xFLE1BQVA7QUFDSDs7QUE5TU87O0FBaU5aNkUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEcsS0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBTdGFydGVyczogeyBzdGFydFdvcmtlciB9IH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcblxuY29uc3QgdG9rZW5DYWNoZSA9IHt9O1xubGV0IGFsbHVyZTtcblxuY2xhc3MgU3VpdGUge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHsgc2VydmVyRW50cnksIHZlcmJvc2UgfSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnNlcnZlckVudHJ5ID0gc2VydmVyRW50cnkgfHwgJy4uLy4uL3NyYy9pbmRleC5qcyc7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBzZXJ2ZXJFbnRyeSAtIFNlcnZlciBlbnRyeSBmaWxlIHBhdGggKHJlbGF0aXZlIHRvIHRlc3Qgd29ya2luZyBwYXRoKVxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0V2ViU2VydmVyXygpIHtcbiAgICAgICAgaWYgKHRoaXMud2ViU2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYiBzZXJ2ZXIgYWxyZWFkeSBzdGFydGVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3JlYXRlV2ViU2VydmVyID0gcmVxdWlyZSh0aGlzLnNlcnZlckVudHJ5KTtcbiAgICAgICAgdGhpcy53ZWJTZXJ2ZXIgPSBjcmVhdGVXZWJTZXJ2ZXIoe1xuICAgICAgICAgICAgZXhpdE9uVW5jYXVnaHQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLndlYlNlcnZlci5zdGFydGVkID09IG51bGwgfHwgdGhpcy53ZWJTZXJ2ZXIuc3RhcnRlZC5zaG91bGQubm90LmJlLm9rKCk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCB0aGlzLndlYlNlcnZlci5zdGFydF8oKTtcblxuICAgICAgICB0aGlzLndlYlNlcnZlci5zdGFydGVkLnNob3VsZC5iZS5vaygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLndlYlNlcnZlcjtcbiAgICB9O1xuXG4gICAgYXN5bmMgc3RvcFdlYlNlcnZlcklmU3RhcnRlZF8oKSB7XG4gICAgICAgIGlmICh0aGlzLndlYlNlcnZlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMud2ViU2VydmVyLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndlYlNlcnZlci5zdG9wXygpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy53ZWJTZXJ2ZXI7XG4gICAgICAgIH0gICAgICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1biBhIHRlc3QgZnVuY3Rpb24gaW4gYSB3b3JrZXJcbiAgICAgKiBAcGFyYW0geyp9IHRlc3RUb1J1biBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRSZXN0Q2xpZW50XyhuYW1lLCB1c2VyVGFnLCB0ZXN0VG9SdW4sIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGVycjtcblxuICAgICAgICBhd2FpdCBzdGFydFdvcmtlcihhc3luYyAoYXBwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLl9nZXRSZXN0Q2xpZW50XyhhcHAsIG5hbWUsIHVzZXJUYWcpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0VG9SdW4oYXBwLCBjbGllbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgd29ya2VyTmFtZTogXCJ0ZXN0ZXJcIiwgICAgICAgIFxuICAgICAgICAgICAgY29uZmlnTmFtZTogXCJ0ZXN0XCIsXG4gICAgICAgICAgICBjb25maWdQYXRoOiBcIi4vdGVzdC9jb25mXCIsXG4gICAgICAgICAgICBhcHBNb2R1bGVzUGF0aDogXCJhcHBfbW9kdWxlc1wiLFxuICAgICAgICAgICAgaWdub3JlVW5jYXVnaHQ6IHRydWUsXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3QoZXJyLCBlcnIubWVzc2FnZSB8fCBlcnIpO1xuICAgICAgICB9ICAgIFxuICAgIH1cblxuICAgIGluaXRBbGx1cmUoKSB7XG4gICAgICAgIGlmICghYWxsdXJlKSB7XG4gICAgICAgICAgICBjb25zdCBhbGx1cmVNb2NoYSA9IHJlcXVpcmUoJ2FsbHVyZS1tb2NoYS9ydW50aW1lJyk7ICAgICAgICAgICAgXG4gICAgICAgICAgICBhbGx1cmUgPSBhbGx1cmVNb2NoYS5hbGx1cmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXN0Q2FzZShzdG9yeSwgYm9keSwgZGF0YSkge1xuICAgICAgICBpdChzdG9yeSwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBzdG9yeTonLCBzdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoYWxsdXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgZXBpYywgZmVhdHVyZSwgb3duZXIsIHRhZywgaXNzdWVzLCBzZXZlcml0eSB9ID0gZGF0YS5hbGx1cmU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uICYmIGFsbHVyZS5kZXNjcmlwdGlvbihkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGVwaWMgJiYgYWxsdXJlLmVwaWMoZXBpYyk7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgJiYgYWxsdXJlLmZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIG93bmVyICYmIGFsbHVyZS5vd25lcihvd25lcik7XG4gICAgICAgICAgICAgICAgICAgIHRhZyAmJiBhbGx1cmUudGFnKHRhZyk7XG4gICAgICAgICAgICAgICAgICAgIHNldmVyaXR5ICYmIGFsbHVyZS5zZXZlcml0eShzZXZlcml0eSk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIF8uaXNFbXB0eShpc3N1ZXMpIHx8IChfLmZvck93bihpc3N1ZXMsIChsaW5rLCBudW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbHVyZS5pc3N1ZShudW0sIGxpbmspO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICBcbiAgICAgICAgICAgICAgICBhbGx1cmUuc3Rvcnkoc3RvcnkpO1xuICAgICAgICAgICAgICAgIGFsbHVyZS5jcmVhdGVTdGVwKGBzdGFydCAke3N0b3J5fWAsICgpID0+IHt9KSgpOyAgICAgICAgICAgIFxuICAgIFxuICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yT3duKGRhdGEucGFyYW1zLCAodiwgaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbHVyZS5wYXJhbWV0ZXIoaywgJypzZWUgYXR0YWNobWVudConKTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoT2JqZWN0KGBwYXJhbVske2t9XWAsIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGx1cmUucGFyYW1ldGVyKGssIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGF3YWl0IGJvZHkoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB0ZXN0Q2FzZUZyb21GaXh0dXJlcyhzdG9yeSwgYm9keSkge1xuICAgICAgICBjb25zdCBwID0gcGF0aC5yZXNvbHZlKGB0ZXN0L2ZpeHR1cmVzLyR7dGhpcy5uYW1lfS5qc2ApO1xuICAgICAgICBjb25zdCBzdWl0ZURhdGEgPSByZXF1aXJlKHApO1xuICAgICAgICBpZiAoIXN1aXRlRGF0YSkgdGhyb3cgbmV3IEVycm9yKGBTdWl0ZSBkYXRhIG5vdCBmb3VuZC4gU3VpdGU6ICR7dGhpcy5uYW1lfWApO1xuICAgIFxuICAgICAgICBjb25zdCB7IGNhc2VzLCAuLi5vdGhlcnMgfSA9IHN1aXRlRGF0YTsgICAgXG4gICAgXG4gICAgICAgIGNvbnN0IHN0b3J5RGF0YSA9IGNhc2VzICYmIGNhc2VzW3N0b3J5XTsgICBcbiAgICAgICAgaWYgKCFzdG9yeURhdGEpIHRocm93IG5ldyBFcnJvcihgU3RvcnkgZGF0YSBub3QgZm91bmQuIFN1aXRlOiAke3RoaXMubmFtZX0sIHN0b3J5OiAke3N0b3J5fWApO1xuICAgIFxuICAgICAgICBfLmNhc3RBcnJheShzdG9yeURhdGEpLmZvckVhY2goKGNhc2VEYXRhLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSB7XG4gICAgICAgICAgICAgICAgYWxsdXJlOiBvdGhlcnMsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBfLm1hcFZhbHVlcyhjYXNlRGF0YS5wYXJhbXMsICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHYoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IGNhc2VEYXRhLmV4cGVjdGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGVzdENhc2UoYCR7c3Rvcnl9IyR7aSsxfWAsIGJvZHksIHByZXBhcmVkRGF0YSk7IFxuICAgICAgICB9KTsgICAgXG4gICAgfVxuXG4gICAgYXN5bmMgdGVzdFN0ZXBfKHN0ZXAsIGJvZHkpIHsgICAgXG4gICAgICAgIGlmIChhbGx1cmUpIHsgICAgICAgIFxuICAgICAgICAgICAgYWxsdXJlLmNyZWF0ZVN0ZXAoc3RlcCwgKCkgPT4ge30pKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU3RlcDogJywgc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBib2R5KCk7XG4gICAgfSAgICBcblxuICAgIGF0dGFjaE9iamVjdChuYW1lLCBvYmopIHtcbiAgICAgICAgaWYgKCFhbGx1cmUpIHJldHVybjtcbiAgICBcbiAgICAgICAgbGV0IHR5cGUgPSAncGxhaW4vdGV4dCcsIGNvbnRlbnQgPSBvYmo7XG4gICAgXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgNCk7XG4gICAgICAgICAgICB0eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGFsbHVyZS5jcmVhdGVBdHRhY2htZW50KG5hbWUsIGNvbnRlbnQsIHR5cGUpO1xuICAgIH1cblxuICAgIGFzeW5jIF9nZXRSZXN0Q2xpZW50XyhhcHAsIG5hbWUsIHVzZXJUYWcpIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXBwLmdldFNlcnZpY2UodGhpcy53ZWJTZXJ2ZXIgPyBgc3VwZXJUZXN0LiR7bmFtZX1gIDogYHJlc3RDbGllbnQuJHtuYW1lfWApO1xuICAgICAgICBpZiAodGhpcy53ZWJTZXJ2ZXIpIHtcbiAgICAgICAgICAgIGNsaWVudC5zZXJ2ZXIgPSB0aGlzLndlYlNlcnZlci5odHRwU2VydmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjbGllbnQub25TZW50KSB7XG4gICAgICAgICAgICBjbGllbnQub25TZW50ID0gKHVybCwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hPYmplY3QodXJsLCByZXN1bHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXNlclRhZykge1xuICAgICAgICAgICAgZGVsZXRlIGNsaWVudC5vblNlbmQ7IFxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICAgICAgfSAgICBcblxuICAgICAgICBsZXQgdG9rZW4sIHVzZXJBdXRoO1xuXG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QodXNlclRhZykpIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5DYWNoZVt1c2VyVGFnLnVzZXJUYWddO1xuICAgICAgICAgICAgdXNlckF1dGggPSB1c2VyVGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbkNhY2hlW3VzZXJUYWddO1xuICAgICAgICAgICAgdXNlckF1dGggPSBhcHAuc2V0dGluZ3MudXNlckF1dGhbdXNlclRhZ107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgY2xpZW50LnBvc3QodXNlckF1dGguZW5kcG9pbnQsIHsgdXNlcm5hbWU6IHVzZXJBdXRoLnVzZXJuYW1lLCBwYXNzd29yZDogdXNlckF1dGgucGFzc3dvcmQgfSk7XG4gICAgICAgICAgICB0b2tlbiA9IHJlcy50b2tlbjtcbiAgICAgICAgICAgIHRva2VuQ2FjaGVbdXNlclRhZ10gPSB0b2tlbjsgICAgICAgIFxuXG4gICAgICAgICAgICBhcHAubG9nKCdpbmZvJywgYExvZ2dlZCBpbiB3aXRoIFske3VzZXJUYWd9XS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaWVudC5vblNlbmQgPSAocmVxKSA9PiB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVxLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1aXRlOyJdfQ==