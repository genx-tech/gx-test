"use strict";

require("source-map-support/register");

const path = require("path");

const {
  _
} = require("@genx/july");

const tokenCache = {};
let allure;

class Suite {
  constructor(name, options) {
    this.name = name;
    const {
      serverEntry,
      verbose
    } = options == null ? {} : options;
    this.serverEntry = serverEntry;
    this.verbose = verbose;
  }

  async startWebServer_() {
    if (this.webServer) {
      throw new Error("Web server already started.");
    }

    const createWebServer = this.serverEntry ? require(this.serverEntry) : require.main.require("../../src/index.js");
    this.webServer = createWebServer({
      exitOnUncaught: false
    });
    this.webServer.started == null || this.webServer.started.should.not.be.ok();
    await this.webServer.start_();
    this.webServer.started.should.be.ok();
    return this.webServer;
  }

  async stopWebServerIfStarted_() {
    if (this.webServer) {
      if (this.webServer.started) {
        await this.webServer.stop_();
      }

      delete this.webServer;
    }
  }

  async startWorker_(testToRun, options) {
    const {
      Starters: {
        startWorker
      }
    } = require("@genx/app");

    let err;
    await startWorker(async app => {
      try {
        await testToRun(app);
      } catch (e) {
        err = e;
      }
    }, {
      workerName: "tester",
      configName: "test",
      configPath: "./test/conf",
      appModulesPath: "app_modules",
      ignoreUncaught: true,
      ...options
    });

    if (err) {
      should.not.exist(err, err.message || err);
    }
  }

  async startRestClient_(name, userTag, testToRun, options) {
    return this.startWorker_(async app => {
      const client = await this._getRestClient_(app, name, userTag);
      return testToRun(app, client);
    }, options);
  }

  initAllure() {
    if (!allure) {
      const allureMocha = require("allure-mocha/runtime");

      allure = allureMocha.allure;
    }
  }

  testCase(story, body, options) {
    const {
      data,
      cleanUp,
      skip,
      only
    } = options == null ? {} : options;
    const self = this;
    let opt;

    if (only) {
      opt = "only";
    } else if (skip) {
      opt = "skip";
    }

    (opt ? it[opt] : it)(story, async function () {
      if (self.verbose) {
        console.log("Starting story:", story);
      }

      if (allure) {
        if (data) {
          const {
            description,
            epic,
            feature,
            owner,
            tag,
            issues,
            severity
          } = data.allure;
          description && allure.description(description);
          epic && allure.epic(epic);
          feature && allure.feature(feature);
          owner && allure.owner(owner);
          tag && allure.tag(tag);
          severity && allure.severity(severity);
          _.isEmpty(issues) || _.forOwn(issues, (link, num) => {
            allure.issue(num, link);
          });
        }

        allure.story(story);
        allure.createStep(`start ${story}`, () => {})();

        if (data && data.params) {
          _.forOwn(data.params, (v, k) => {
            if (typeof v === "object") {
              allure.parameter(k, "*see attachment*");
              self.attachObject(`param[${k}]`, v);
            } else {
              allure.parameter(k, v);
            }
          });
        }
      }

      if (cleanUp) {
        try {
          await body(data);
        } finally {
          await cleanUp();
        }
      } else {
        await body(data);
      }
    });
  }

  testCaseFromFixtures(story, body, options) {
    const p = path.resolve(`test/fixtures/${this.name}.js`);

    const suiteData = require(p);

    if (!suiteData) throw new Error(`Suite data not found. Suite: ${this.name}`);
    const {
      cases,
      ...others
    } = suiteData;
    const storyData = cases && cases[story];
    if (!storyData) throw new Error(`Story data not found. Suite: ${this.name}, story: ${story}`);

    _.castArray(storyData).forEach((caseData, i) => {
      const preparedData = {
        allure: others,
        params: _.mapValues(caseData.params, v => {
          if (typeof v === "function") return v();
          return v;
        }),
        expected: caseData.expected
      };
      this.testCase(`${story}#${i + 1}`, body, { ...options,
        data: preparedData
      });
    });
  }

  async benchmark_(mapOfMethods, payload) {
    const Benchmark = require("benchmark");

    const suite = new Benchmark.Suite();

    _.each(mapOfMethods, (f, name) => {
      suite.add(name, function () {
        f(payload);
      });
    });

    return new Promise((resolve, reject) => {
      const self = this;
      suite.on("cycle", event => {
        const cycleMessage = String(event.target);
        console.log(cycleMessage);
        this.attachObject("cycle", cycleMessage);
      }).on("complete", function () {
        const completeMessage = "The fastest is " + this.filter("fastest").map("name");
        console.log(completeMessage);
        self.attachObject("complete", completeMessage);
        resolve();
      }).on("error", event => reject(String(event.target))).run({
        async: true
      });
    });
  }

  async testStep_(step, body) {
    if (allure) {
      allure.createStep(step, () => {})();
    }

    if (this.verbose) {
      console.log("Step: ", step);
    }

    if (body) {
      await body();
    }
  }

  attachObject(name, obj) {
    if (!allure) return;
    let type = "text/plain",
        content = obj;

    if (typeof obj !== "string") {
      content = JSON.stringify(obj, null, 4);
      type = "application/json";
    }

    allure.createAttachment(name, content, type);
  }

  async _getRestClient_(app, name, userTag) {
    const client = app.getService(this.webServer ? `superTest-${name}` : `restClient-${name}`);

    if (this.webServer) {
      client.server = this.webServer.httpServer;
    }

    if (!client.onSent) {
      client.onSent = (url, result) => {
        this.attachObject(url, result);
      };
    }

    if (!userTag) {
      delete client.onSend;
      return client;
    }

    let token, userAuth;
    let responseBodyKey = app.settings.responseBodyKey;

    if (_.isPlainObject(userTag)) {
      token = tokenCache[userTag.userTag];
      userAuth = userTag;
    } else {
      token = tokenCache[userTag];
      userAuth = app.settings.userAuth[userTag];
    }

    if (!token) {
      let res = await client.post(userAuth.endpoint, {
        username: userAuth.username,
        password: userAuth.password
      });

      if (responseBodyKey) {
        token = res[responseBodyKey].token;
      } else {
        token = res.token;
      }

      tokenCache[userTag] = token;
      app.log("info", `Logged in with [${userTag}].`);
    }

    client.onSend = req => {
      req.set("Authorization", `Bearer ${token}`);
    };

    return client;
  }

}

module.exports = Suite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,